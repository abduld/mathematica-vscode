{
    "name": "Mathematica",
    "scopeName": "source.mathematica",
    "fileTypes": [".m", ".wl"],
    "patterns": [
        {"include": "#comments"},
        {"include": "#strings"},
        {"include": "#file_operations"},
        {"include": "#expressions"},
        {"include": "#part"}
    ],
    "repository":{
        "comments": {
            "patterns": [
                {
                    "comment": "Comment",
                    "begin": "\\(\\*",
                    "beginCaptures": {"0": {"name": "punctuation.definition.comment"}},
                    "end": "\\*\\)",
                    "endCaptures": {"0": {"name": "punctuation.definition.comment"}},
                    "name": "comment.block",
                    "patterns": [{"include": "$self"}]
                }
            ]
        },
        "expressions": {
            "patterns": [
                {"include": "#slot"},
                {"include": "#numbers"},
                {"include": "#other_functions"},
                {"include": "#character_operators"},
                {"include": "#full_expression"},
                {"include": "#message"},
                {"include": "#pattern"},
                {"include": "#query"},
                {"include": "#rule"},
                {"include": "#bracket_punctuations"},
                {"include": "#character"},
                {"include": "#operators"}
            ]
        },
        "full_expression": {
            "comment": "Full expression forms",
            "patterns": [
                {
                    "comment": "Standard form",
                    "match": "([0-9\\.]*)([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(\\[)(?!\\[)",
                    "captures": {
                        "1": {"name": "constant.numeric"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"}
                    }
                },
                {
                    "comment": "Prefix form",
                    "match": "([0-9\\.]*)([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(@)",
                    "captures": {
                        "1": {"name": "constant.numeric"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"},
                        "4": {"name": "keyword.operator"}
                    }
                },
                {
                    "comment": "Infix form",
                    "match": "\\s*(~)[\\s\\(]*([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*)[\\s\\)]*(~)\\s*",
                    "captures": {
                        "1": {"name": "keyword.operator"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"},
                        "4": {"name": "keyword.operator"}
                    }
                },
                {
                    "comment": "Postfix form",
                    "match": "(//)[\\s\\(]*([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*)",
                    "captures": {
                        "1": {"name": "keyword.operator"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"}
                    }
                }
            ]
        },
        "other_functions": {
            "comment": "Other function highlights.",
            "patterns": [
                {
                    "comment": "Compositions of functions",
                    "match": "([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(@\\*|/\\*)[\\s\\(]*([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*)",
                    "captures": {
                        "1": {"name": "support.class"},
                        "2": {"name": "support.function"},
                        "3": {"name": "keyword.operator"},
                        "4": {"name": "support.class"},
                        "5": {"name": "support.function"}}
                },
                {
                    "comment": "MapAll expression",
                    "match": "([0-9\\.]*)([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(//@)",
                    "captures": {
                        "1": {"name": "constant.numeric"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"},
                        "4": {"name": "keyword.operator"}
                    }
                },
                {
                    "comment": "Map expression",
                    "match": "([0-9\\.]*)([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(/@)",
                    "captures": {
                        "1": {"name": "constant.numeric"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"},
                        "4": {"name": "keyword.operator"}
                    }
                },
                {
                    "comment": "Apply expression",
                    "match": "([0-9\\.]*)([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(@@@)",
                    "captures": {
                        "1": {"name": "constant.numeric"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"},
                        "4": {"name": "keyword.operator"}
                    }
                },
                {
                    "comment": "Apply expression",
                    "match": "([0-9\\.]*)([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*|&)[\\s\\)]*(@@)",
                    "captures": {
                        "1": {"name": "constant.numeric"},
                        "2": {"name": "support.class"},
                        "3": {"name": "support.function"},
                        "4": {"name": "keyword.operator"}
                    }
                }
            ]
        },
        "message": {
            "patterns": [
                {
                    "match": "\\b([A-Za-z\\$][A-Za-z0-9\\$]*)\\s*(::)\\s*([A-Za-z\\$][A-Za-z0-9\\$]*)\\b",
                    "captures": {
                        "1": {"name": "entity.name.function"},
                        "2": {"name": "keyword.operator"},
                        "3": {"name": "string.unquoted"}
                    }
                }
            ]
        },
        "slot": {
            "comment": "Arguments of pure functions.",
            "patterns": [
                {
                    "match": "##[0-9]*",
                    "name": "variable.parameter"
                },
                {
                    "match": "#[A-Za-z0-9\\$]*",
                    "name": "variable.parameter"
                }
            ]
        },
        "pattern": {
            "patterns": [
                {
                    "match": "\\b([A-Za-z\\$][A-Za-z0-9\\$]*)?(_\\.|_{1,3})([A-Za-z\\$][A-Za-z0-9\\$]*)?(\\.{2,3})?(\\s*\\?\\s*[A-Za-z\\$][A-Za-z0-9\\$]*)?",
                    "name": "variable.parameter"
                }
            ]
        },
        "query": {
            "comment": "Queries and tests",
            "patterns": [
                {
                    "match": "(\\?)\\s*([A-Za-z\\$][A-Za-z0-9\\$]*`)?([A-Za-z\\$][A-Za-z0-9\\$]*)",
                    "captures": {
                        "1": {"name": "keyword.operator"},
                        "2": {"name": "support.class"},
                        "3": {"name": "entity.name.function"}
                    }
                }
            ]
        },
        "strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end"
						}
					},
					"name": "string.quoted.double",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape"
				}
			]
		},
        "line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation"
						}
					}
				}
			]
		},
        "numbers": {
            "patterns": [
                {
                    "comment": "Reals",
                    "match": "(\\b|\\b[0-9]+\\^\\^)([0-9]+\\.[0-9]*|\\.[0-9]+)",
                    "name": "constant.numeric"
                },
                {
                    "comment": "Integers",
                    "match": "(\\b|\\b[0-9]+\\^\\^)[0-9]+",
                    "name": "constant.numeric"
                }
            ]
        },
        "part": {
            "patterns": [
                {
                    "begin": "\\[\\[|〚",
                    "beginCaptures": {"0": {"name": "keyword.operator"}},
                    "end": "\\]\\]|〛",
                    "endCaptures": {"0": {"name": "keyword.operator"}},
                    "patterns": [
                        {"include": "#expressions"},
                        {"include": "#span"},
                        {"include": "$self"}
                    ]
                }
            ]
        },
        "span": {
            "patterns": [
                {
                    "match": ";;",
                    "name": "keyword.operator"
                }
            ]
        },
        "character": {
            "patterns": [
                {
                    "match": "\\\\\\.[A-Fa-f0-9]{2}",
                    "name": "variable.other.object"
                },
                {
                    "match": "\\\\:[A-Fa-f0-9]{4}",
                    "name": "variable.other.object"
                },
                {
                    "match": "\\\\\\[[(A-Za-z)]*\\]",
                    "name": "variable.other.object"
                }
            ]
        },
        "rule": {
            "patterns": [
                {
                    "match": "([A-Za-z\\$][A-Za-z0-9\\$]*)\\s*(->|→|:>|⧴)",
                    "captures": {
                        "1": {"name": "support.variable.property"},
                        "2": {"name": "keyword.operator"}
                    }
                }
            ]
        },
        "bracket_punctuations": {
            "patterns": [
                {
                    "match": "\\{",
                    "name": "punctuation.definition.list.begin"
                },
                {
                    "match": "\\}",
                    "name": "punctuation.definition.list.end"
                },
                {
                    "match": "<\\|",
                    "name": "punctuation.definition.dict.begin"
                },
                {
                    "match": "\\|>",
                    "name": "punctuation.definition.dict.end"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "comment": "Get operator",
                    "match": "<<",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Script control operators",
                    "match": "\\\\(&|\\+|%|\\_|!)",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Pattern test",
                    "match": "\\?",
                    "name": "keyword.operator"
                },
                {
                    "comment": "Increment",
                    "match": "\\+\\+",
                    "name": "keyword.operator.increment"
                },
                {
                    "comment": "Decrement",
                    "match": "--",
                    "name": "keyword.operator.decrement"
                },
                {
                    "comment": "Postfix form",
                    "match": "//",
                    "name": "keyword.operator"
                },
                {
                    "comment": "Logic and operator",
                    "match": "&&",
                    "name": "keyword.operator.logical"
                },
                {
                    "comment": "& sign for pure functions",
                    "match": "&",
                    "name": "support.function"
                },
                {
                    "match": "~",
                    "name": "keyword.operator"
                },
                {
                    "comment": "Fractorial",
                    "match": "!",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Derivative",
                    "match": "'",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "String join",
                    "match": "<>",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Power subscript",
                    "match": "\\\\(\\^|%)",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Power",
                    "match": "\\^",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Sqrt",
                    "match": "√|\\\\@",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Calculas operators",
                    "match": "∫|ⅆ|∂|∇",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Other operators, undefined",
                    "match": "□|◦|⊙",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Multiply",
                    "match": "(\\*|\\.|×)",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Division",
                    "match": "(/|\\\\/|÷)",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Plus and minus",
                    "match": "(-|\\+|±|∓)",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Product",
                    "match": "∏",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Yet another wave of special characters, and undefined in System`",
                    "match": "≀|∐|⌢|⌣|⊕|⊖",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Set operators",
                    "match": "⋂|⋃",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Same as",
                    "match": "=(=|!)=",
                    "name": "keyword.operator.comparison"
                },
                {
                    "comment": "Comparisons",
                    "match": "(==|!=|>=|<=|>|<|≠|≥|⩾|≤|⩽)",
                    "name": "keyword.operator.comparison"
                },
                {
                    "comment": "Other comparisons",
                    "match": "∥|∦",
                    "name": "keyword.operator.comparison"
                },
                {
                    "comment": "Element and subset of",
                    "match": "∈|∉|⊂|⊃",
                    "name": "keyword.operator.rest"
                }
            ]
        },
        "character_operators": {
            "patterns": [
                {
                    "comment": "Matrix operators",
                    "match": "\\\\\\[(Conjugate|Transpose|ConjugateTranspose|HermitianConjugate)\\]",
                    "name": "keyword.operator"
                },
                {
                    "comment": "Sqrt",
                    "match": "\\\\\\[(Sqrt)\\]",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Calculas operators",
                    "match": "\\\\\\[(Integral|DifferentialD|PartialD|Del|DiscreteShift|DiscreteRatio|DifferenceDelta)\\]",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Other operators, undefined",
                    "match": "\\\\\\[(Square|SmallCircle|CircleDot)\\]",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Multiply",
                    "match": "\\\\\\[(Cross|Times|Star)\\]",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Division",
                    "match": "\\\\\\[(Divide)\\]",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Plus and minus",
                    "match": "\\\\\\[(PlusMinus|MinusPlus)\\]",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Product",
                    "match": "\\\\\\[(Product)\\]",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "comment": "Yet another wave of special characters, and undefined in System`",
                    "match": "\\\\\\[(VerticalTilde|Coproduct|Cap|Cup|CirclePlus|CircleMinus)\\]",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Set operators",
                    "match": "\\\\\\[(Intersection|Union)\\]",
                    "name": "keyword.operator.rest"
                },
                {
                    "comment": "Comparisons",
                    "match": "\\\\\\[(Equal|LongEqual|NotEqual|GreaterEqual|GreaterSlantEqual|LessEqual|LessSlantEqual)\\]",
                    "name": "keyword.operator.comparison"
                },
                {
                    "comment": "Other comparisons",
                    "match": "\\\\\\[(VerticalBar|NotVerticalBar|DoubleVerticalBar|NotDoubleVerticalBar)\\]",
                    "name": "keyword.operator.comparison"
                },
                {
                    "comment": "Element and subset of",
                    "match": "\\\\\\[(Element|NotElement|Subset|Superset)\\]"
                }
            ]
        },
        "file_operations": {
            "patterns": [
                {
                    "match": "(<<)(\\S*)\\b",
                    "captures": {
                        "1": {"name": "keyword.operator.rest"},
                        "2": {"name": "string.unquoted"}
                    }
                }
            ]
        }
    }
}